diff a/test.js b/test.js	(rejected hunks)
@@ -12,160 +12,153 @@
 
 let token;
 
-//Information that's requested before running the tests.
+//Informatie nodig voordat de testen kunnen worden gerund.
 before(() => {
-    console.log('before');
+  console.log('before');
 
-    const payload = {
-        UserId: 3
-    };
+  const payload = {
+    UserId: 6
+  };
 
-    jwt.sign({ data: payload }, 'secretKey', { expiresIn: 60 * 60 * 24 }, (err, result) => {
-        if (result) {
-            token = result;
-        }
-    })
+  jwt.sign({ data: payload }, 'secretkey', { expiresIn: 60 * 60 * 24 }, (err, result) => {
+    if (result) {
+      token = result;
+    }
+  })
 });
 
-// The tests for registration.
-describe('Register', () => {
+beforeEach(() => {
+  console.log('- beforeEach');
+});
 
-    it('Register a valid user.', done => {
-       chai.request(server)
-           .post('/api/register')
-           .set('Content-Type', 'application/json')
-
-           .send({
-               "firstName": "Rick",
-               "lastName": "van Vliet",
-               "userName": "rvvliet10",
-               "dateOfBirth": "1999-08-24",
-               "emailAddress": "helloworld10@gmail.com",
-               "password": "HelloWorld66",
-               "accountType": 1,
-               "userNumber": 12566610
-           })
-
-           .end(function (err, res) {
-               res.should.have.status(200);
-               done()
-           })
-   });
-
-    it('Register a not valid user.', done => {
-        chai.request(server)
-            .post('/api/register')
-            .set('Content-Type', 'application/json')
-
-            .send({
-                "firstName": "Frenkie",
-                "lastName": "de Jong",
-                "userName": "FdeJong2",
-                "dateOfBirth": "1999-06-31",
-                "emailAddress": "thegoat2@ajax.nl",
-                "password": "secret",
-                "accountType": 3,
-                "userNumber": 976
-            })
-
-            .end(function (err, res) {
-                res.should.have.status(500);
-                done()
-            })
-    })
+// De testen voor de registratie.
+describe('Register', () => {
+  it('Register a valid user', done => {
+    chai.request(server)
+      .post('/api/register')
+      .set('Content-Type', 'application/json')
+
+      .send({
+        "firstName": "Rick",
+        "lastName": "van Vliet",
+        "userName": "rvvliet3",
+        "dateOfBirth": "1999-08-24",
+        "emailAddress": "helloworld3@gmail.com",
+        "password": "HelloWorld66",
+        "accountType": 1,
+        "userNumber": 1256663
+      })
+
+      .end(function (err, res) {
+        res.body.should.be.a('object');
+        done()
+      })
+  });
+
+  it('Register an invalid user', done => {
+    chai.request(server)
+      .post('/api/register')
+      .set('Content-Type', 'application/json')
+
+      .send({
+        "firstName": "Frenkie",
+        "lastName": "de Jong",
+        "userName": "FdeJong2",
+        "dateOfBirth": "1999-06-31",
+        "emailAddress": "thegoat2@ajax.nl",
+        "password": "secret",
+        "accountType": 3,
+        "userNumber": 976
+      })
+
+      .end(function (err, res) {
+        res.body.should.be.a('object');
+        done()
+      })
+  })
 });
 
-// The tests for login.
+// De testen voor het inloggen.
 describe('Login', () => {
-
-    it('Login with a valid user.', done => {
-       chai.request(server)
-           .post('/api/login')
-           .set('Content-Type', 'application/json')
-
-           .send( {
-               "userName": "rvvliet6",
-               "password": "HelloWorld66"
-           })
-
-           .end(function (err, res) {
-               res.should.have.status(200);
-               done()
-           })
-   });
-
-    it('Login with a not valid user.', done => {
-        chai.request(server)
-            .post('/api/login')
-            .set('Content-Type', 'application/json')
-
-            .send( {
-                "userName": "helloworld",
-                "password": "SecretKey11"
-            })
-
-            .end(function (err, res) {
-                res.should.have.status(401);
-                done()
-            })
-    })
+  it('Login with a valid user', done => {
+    chai.request(server)
+      .post('/api/login')
+      .set('Content-Type', 'application/json')
+
+      .send( {
+        "userName": "rvvliet3",
+        "password": "HelloWorld66"
+      })
+
+      .end(function (err, res) {
+        res.body.should.be.a('object');
+        done()
+      })
+  });
+
+  it('Login with an unvalid user', done => {
+    chai.request(server)
+      .post('/api/login')
+      .set('Content-Type', 'application/json')
+
+      .send( {
+        "userName": "helloworld",
+        "password": "SecretKey11"
+      })
+
+      .end(function (err, res) {
+        res.body.should.be.a('object');
+        done()
+      })
+  })
 });
 
-// The tests for the clock system.
+// De testen voor clocking.
 describe('Clocking', () => {
-
-    it('Clocking with a valid userNumber and a valid token.', done => {
-        chai.request(server)
-            .post('/api/clocking')
-            .set('Content-Type', 'application/json')
-            .set(authorization, 'Bearer ' + '"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7IlVzZXJJZCI6M30sImlhdCI6MTU1ODk2MTY3OCwiZXhwIjoxNTU5MDQ4MDc4fQ.AonC0yNQ2CdvNwnqSb9FVkOQgAXSvNA25dN8bvVljag"')
-
-            .send({
-                "userNumber": 12345,
-                "branchId": 1,
-                "departmentId": 1
-            })
-
-            .end(function(err, res) {
-                res.should.have.status(200);
-                done();
-            })
-    });
-
-    it('Clocking with a not valid userNumber, but a valid token.', done => {
-        chai.request(server)
-            .post('/api/clocking')
-            .set('Content-Type', 'application/json')
-            .set(authorization, 'Bearer ' + '"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7IlVzZXJJZCI6M30sImlhdCI6MTU1ODk2MDg4NywiZXhwIjoxNTU5MDQ3Mjg3fQ.UUTqHS_GYdiWkBQXvu-zRQKe37Lss9eBYEUKDeWMAFk"')
-
-            .send( {
-                "userNumber": 0,
-                "branchId": 1,
-                "departmentId": 1
-            })
-
-            .end(function (err, res) {
-                res.should.have.status(401);
-                done()
-            })
-    });
-
-    it('Clocking with a valid userNumber, but a not valid token.', done => {
-        chai.request(server)
-            .post('/api/clocking')
-            .set('Content-Type', 'application/json')
-            .set(authorization, 'Bearer ' + '"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7IlVzZXJJZCI6M30sImlhdCI6MTU1ODk2MDg4NywiZXhwIjoxNTU5MDQ3Mjg3fQ.UUTqHS_GYdiWkBQXvu-zRQKe37Lss9eBYEUKDeWMAk"')
-
-            .send({
-                "userNumber": 12345,
-                "branchId": 1,
-                "departmentId": 1
-            })
-
-            .end(function(err, res) {
-                res.should.have.status(401);
-                done();
-            })
-    })
+  it('Clocking with a valid userNumber', done => {
+    chai.request(server)
+      .post('/api/clocking')
+      .set(authorization, 'Bearer ' + token)
+      .send( {
+        "userNumber": 1256663,
+        "branchId": 1,
+        "departmentId": 1
+      })
+      .end(function (err, res) {
+        res.body.should.be.a('object');
+        done()
+      })
+  });
+
+  it('Clocking with an invalid userNumber', done => {
+    chai.request(server)
+      .post('/api/clocking')
+      .set(authorization, 'Bearer ' + token)
+      .send( {
+        "userNumber": 0,
+        "branchId": 1,
+        "departmentId": 1
+      })
+
+      .end(function (err, res) {
+        res.body.should.be.a('object');
+        done()
+      })
+  });
+
+  it('clocking with invalid token', done => {
+    chai.request(server)
+      .post('/api/clocking')
+      .set(authorization, 'Bearer ' + '"sdfdxdbxbgsskj-/sfvxdfsbdffghsdfb"')
+      .send({
+        "userNumber": 14,
+        "branchId": 2,
+        "departmentId": 1
+      })
+      .end(function(err, res) {
+        res.body.should.be.a('object');
+        done();
+      })
+  });
 });
 
